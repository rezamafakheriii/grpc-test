// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: product_order.proto

package productorder

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProductOrderService_ListProducts_FullMethodName = "/productorder.ProductOrderService/ListProducts"
	ProductOrderService_PlaceOrder_FullMethodName   = "/productorder.ProductOrderService/PlaceOrder"
)

// ProductOrderServiceClient is the client API for ProductOrderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductOrderServiceClient interface {
	ListProducts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ProductList, error)
	PlaceOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error)
}

type productOrderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProductOrderServiceClient(cc grpc.ClientConnInterface) ProductOrderServiceClient {
	return &productOrderServiceClient{cc}
}

func (c *productOrderServiceClient) ListProducts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ProductList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProductList)
	err := c.cc.Invoke(ctx, ProductOrderService_ListProducts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productOrderServiceClient) PlaceOrder(ctx context.Context, in *OrderRequest, opts ...grpc.CallOption) (*OrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrderResponse)
	err := c.cc.Invoke(ctx, ProductOrderService_PlaceOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductOrderServiceServer is the server API for ProductOrderService service.
// All implementations must embed UnimplementedProductOrderServiceServer
// for forward compatibility.
type ProductOrderServiceServer interface {
	ListProducts(context.Context, *Empty) (*ProductList, error)
	PlaceOrder(context.Context, *OrderRequest) (*OrderResponse, error)
	mustEmbedUnimplementedProductOrderServiceServer()
}

// UnimplementedProductOrderServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProductOrderServiceServer struct{}

func (UnimplementedProductOrderServiceServer) ListProducts(context.Context, *Empty) (*ProductList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProducts not implemented")
}
func (UnimplementedProductOrderServiceServer) PlaceOrder(context.Context, *OrderRequest) (*OrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceOrder not implemented")
}
func (UnimplementedProductOrderServiceServer) mustEmbedUnimplementedProductOrderServiceServer() {}
func (UnimplementedProductOrderServiceServer) testEmbeddedByValue()                             {}

// UnsafeProductOrderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductOrderServiceServer will
// result in compilation errors.
type UnsafeProductOrderServiceServer interface {
	mustEmbedUnimplementedProductOrderServiceServer()
}

func RegisterProductOrderServiceServer(s grpc.ServiceRegistrar, srv ProductOrderServiceServer) {
	// If the following call pancis, it indicates UnimplementedProductOrderServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProductOrderService_ServiceDesc, srv)
}

func _ProductOrderService_ListProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductOrderServiceServer).ListProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductOrderService_ListProducts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductOrderServiceServer).ListProducts(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductOrderService_PlaceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductOrderServiceServer).PlaceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductOrderService_PlaceOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductOrderServiceServer).PlaceOrder(ctx, req.(*OrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductOrderService_ServiceDesc is the grpc.ServiceDesc for ProductOrderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductOrderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "productorder.ProductOrderService",
	HandlerType: (*ProductOrderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProducts",
			Handler:    _ProductOrderService_ListProducts_Handler,
		},
		{
			MethodName: "PlaceOrder",
			Handler:    _ProductOrderService_PlaceOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product_order.proto",
}
